{"version":3,"sources":["images/droplets.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Diffilculty","fetchQuizQuestions","amount","diffilculty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameover","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99bcc473.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/droplets.7e7e53e5.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string,\r\n    correct_answer: string,\r\n    difficulty: string,\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Diffilculty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n}\r\nexport const fetchQuizQuestions = async (amount: number, diffilculty: Diffilculty) => {\r\n    const endpoint = `http://opentdb.com/api.php?amount=${amount}&difficulty=${diffilculty}&type=multiple`;\r\n    const data =  await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ));\r\n}","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);\r\n    ","import { appendFile } from \"fs\";\r\n\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div `\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1rem;\r\n\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps> `\r\n    transition: all 0.3s ease;\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n    \r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size:0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${ ({correct, userClicked}) =>\r\n            correct\r\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n                : !correct && userClicked \r\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)' };\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: white;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25); \r\n    }\r\n`","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNr, totalQuestions}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr}/ {totalQuestions} \r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question}}></p>\r\n        <div>\r\n            {answers.map((answer) => (\r\n                <ButtonWrapper \r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/droplets.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    html {\r\n        height: 100%;\r\n    }\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin:0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    >p {\r\n        color: white;\r\n    }\r\n\r\n    .score {\r\n        color: white;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline, sans-serif;\r\n        background-image: linear-gradient(180deg, white, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, white, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0, 5px, 10px, rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n    \r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n\r\n`;","import React, { useState} from 'react';\nimport { fetchQuizQuestions, Diffilculty, QuestionState } from './API';\n\nimport QuestionCard from './components/QuestionCard';\n\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [ loading, setLoading ] = useState(false);\n  const [ questions, setQuestions ] = useState<QuestionState[]>([]);\n  const [ number, setNumber ] = useState(0);\n  const [ userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [ score, setScore ] = useState(0);\n  const [ gameover, setGameOver ] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions (\n      TOTAL_QUESTIONS,\n      Diffilculty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameover) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n        if (correct) setScore(prev => prev + 1);\n        const answerObject = {\n          question: questions[number].question,\n          answer,\n          correct,\n          correctAnswer: questions[number].correct_answer\n        };\n        setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Quiz Master</h1>\n        {gameover || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ): null}\n\n        {!gameover ?  <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading questions...</p>} \n        {!loading && !gameover && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number]: undefined}\n          callback={checkAnswer}\n        />\n        )}\n        {!gameover && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\n        ): null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}